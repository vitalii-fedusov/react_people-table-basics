{"version":3,"sources":["App.tsx","api.ts","components/Loader/Loader.tsx","components/PeoplesList.tsx","components/Loader/Table.tsx","components/PageNotFound.tsx","components/HomeTitle.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","App","className","role","to","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","getParent","name","arr","find","person","PeoplesList","peoples","selectedPersonSlug","useParams","personSlug","map","slug","sex","born","died","motherName","fatherName","mother","father","Table","useState","setPeoples","isLoading","setIsLoading","errorMessage","setErrorMessage","useEffect","peopleService","peopleFromServer","catch","finally","length","PageNotFound","HomeTitle","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.c5daaf36.chunk.js","sourcesContent":["import { NavLink, Outlet } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport './App.scss';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => (\n  classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  })\n);\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <NavLink\n              className={getLinkClass}\n              to=\"/\"\n            >\n              Home\n            </NavLink>\n\n            <NavLink\n              to=\"/people\"\n              className={getLinkClass}\n            >\n              People\n            </NavLink>\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { NavLink, useParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\n\ntype Props = {\n  peoples: Person[],\n};\n\nfunction getParent(name: string | null, arr: Person[]) {\n  return arr.find(person => person.name === name);\n}\n\nexport const PeoplesList: React.FC<Props> = ({ peoples }) => {\n  const { personSlug } = useParams();\n  const selectedPersonSlug = personSlug;\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {peoples.map((person) => {\n          const {\n            name,\n            slug,\n            sex,\n            born,\n            died,\n            motherName,\n            fatherName,\n          } = person;\n          const mother = getParent(motherName, peoples);\n          const father = getParent(fatherName, peoples);\n\n          return (\n            <tr\n              data-cy=\"person\"\n              key={slug}\n              className={classNames({\n                'has-background-warning': selectedPersonSlug === slug,\n              })}\n            >\n              <td>\n                <NavLink\n                  to={slug}\n                  className={classNames({\n                    'has-text-danger': sex === 'f',\n                  })}\n                >\n                  {name}\n                </NavLink>\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n\n              {motherName ? (\n                <td>\n                  {mother ? (\n                    <NavLink\n                      className=\"has-text-danger\"\n                      to={`${mother.slug}`}\n                    >\n                      {motherName}\n                    </NavLink>\n                  ) : motherName}\n                </td>\n              ) : (\n                <td>-</td>\n              )}\n\n              {fatherName ? (\n                <td>\n                  {father ? (\n                    <NavLink to={`${father.slug}`}>\n                      {fatherName}\n                    </NavLink>\n                  ) : fatherName}\n                </td>\n              ) : (\n                <td>-</td>\n              )}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport * as peopleService from '../../api';\nimport { Person } from '../../types';\nimport { Loader } from './Loader';\nimport { PeoplesList } from '../PeoplesList';\n\nexport const Table = () => {\n  const [peoples, setPeoples] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const getPeoples = () => {\n    return peopleService.getPeople()\n      .then(peopleFromServer => setPeoples(peopleFromServer))\n      .catch(() => setErrorMessage('Something went wrong'))\n      .finally(() => setIsLoading(false));\n  };\n\n  useEffect(() => {\n    getPeoples();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {errorMessage && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              {errorMessage}\n            </p>\n          )}\n\n          {!isLoading && peoples.length === 0 && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {!isLoading && (\n            <PeoplesList peoples={peoples} />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","export const PageNotFound = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","export const HomeTitle = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import {\n  Navigate,\n  Route,\n  Routes,\n  HashRouter as Router,\n} from 'react-router-dom';\nimport { App } from './App';\nimport './App.scss';\nimport { Table } from './components/Loader/Table';\nimport { PageNotFound } from './components/PageNotFound';\nimport { HomeTitle } from './components/HomeTitle';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomeTitle />} />\n        <Route path=\"home\" element={<Navigate replace to=\"/\" />} />\n        <Route path=\"people\" element={<Table />}>\n          <Route path=\":personSlug?\" element={<Table />} />\n        </Route>\n        <Route path=\"*\" element={<PageNotFound />} />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}